#summary Application Configuration Class.

===Location===
{{{./nu/application/config/}}}

===File===
{{{config.php}}}

Nu Engine will load the file {{{config.php}}} by default. You can name this differently or create a new configuration class in the same directory but you will have to direct Nu Engine to load the new file by editting {{{./docroot/index.php}}}

===Class===
A class named *Config* should be defined in your configuration file, the engine will instantiate this class itself and use its properties, it will also pass the instance to the registry object as {{{$registry['config']}}} so it will be available all through out the application.

===Properties===
|| *variable* || *data type* || *description* || *usage* || 
|| $debug || Boolean || if true, will turn on error reporting ||  ||
|| $debugLevel || Integer || sets the debug level for error reporting || E_ALL ^ E_NOTICE ||
|| $maintenance || Boolean || if true, engine will throw a maintenance exception and all pages shall display an "undergoing maintenance" page || ||
|| $usingDB || Boolean || if true, engine will create a database connection and pass it onto the $registry variable || ||
|| $usingPDO || Boolean || if true, engine will create the database connection using PDO || ||
|| $dbHost || String || database host || ||
|| $dbName || String || database name || ||
|| $dbUser || String || database username || ||
|| $dbPass || String || database user password || ||
|| $usingMemcache || Boolean|| if true, engine will create a memcache connection and pass it onto the $registry variable || ||
|| $memcacheHost || String || memcache host name || ||
|| $memcachePort || Integer || memcache port || usually needs to be equal to 11211 ||
|| $domain || String || the domain name where the application is located || ||
|| $plugins || String Array || plugins that will be loaded once engine has run || array('templater') ||

You may add more properties to this class that aren't defined in this document.

===Methods===
====`__construct()`====
The construction function for your configuration class, this is useful if you want to set configuration values dynamically.

  =====Parameters=====
  _none_

  =====Example=====
  {{{
  public $siteLive = false;

  public function __construct()
  {
      if($siteLive)
      {
          #tons of declaration for live site
      }
      else
      {
          #tons of other declarations for site on local machine
      }
  }
  }}}